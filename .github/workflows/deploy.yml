name: Deploy Trading Application

on:
  push:
    branches:
      - master

concurrency:
  group: master
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Extraire le code dans un environnement docker dans github action
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Afficher la structure des fichiers pour validation
      - name: Display repository structure
        run: |
          pwd
          ls -R

      # Installer Docker Compose sur la VM distante
      - name: Install Docker and Docker Compose
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: ${{ secrets.ORACLE_VM_USER }}
          key: ${{ secrets.ORACLE_VM_SSH_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker --version
            docker-compose --version

      # Build des images Docker
      - name: Build Backend Image
        working-directory: Back/trading_back_v2
        run: |
          docker build -t trading-back -f dockerfile .

      - name: Build API Image
        working-directory: API_trading
        run: |
          docker build -t trading-api dockerfile .

      - name: Build Frontend Image
        working-directory: Front/trading_front
        run: |
          docker build -t trading-front dockerfile .

        # Transférer les images Docker
      - name: Transfer Docker images
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: ${{ secrets.ORACLE_VM_USER }}
          key: ${{ secrets.ORACLE_VM_SSH_KEY }}
          script: |
            # Sauvegarder les images Docker sur la VM
            docker save -o ~/trading_app/trading-back.tar trading-back
            docker save -o ~/trading_app/trading-api.tar trading-api
            docker save -o ~/trading_app/trading-front.tar trading-front

      # 2. Copier les fichiers et images vers la VM
      - name: Copy files and Docker images to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: ${{ secrets.ORACLE_VM_USER }}
          key: ${{ secrets.ORACLE_VM_SSH_KEY }}
          source: 
            docker-compose.yml
          target: "~/trading_app"
          strip_components: 0

      #Charger et déployer sur la VM
      - name: Deploy on VM
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: ${{ secrets.ORACLE_VM_USER }}
          key: ${{ secrets.ORACLE_VM_SSH_KEY }}
          script: |
            cd ~/trading_app

            # Charger les images Docker
            docker load -i trading-back.tar
            docker load -i trading-api.tar
            docker load -i trading-front.tar

            # Arrêter et supprimer les conteneurs existants
            docker-compose down --rmi all

            # Redémarrer les services
            docker-compose up -d --build

            # Nettoyer les images et conteneurs inutiles
            docker system prune -af
        

      # # Construire l'image Docker pour le back
      # - name: Build Docker Image Back
      #   working-directory: Back/trading_back_v2
      #   run: |
      #     # Générer un tag unique avec timestamp
      #     # export IMAGE_TAG=back-image:$(date +%s)
      #     # docker build . --file dockerfile-back --tag $IMAGE_TAG
      #     docker build -t trading-back -f dockerfile-back .
          
      #     # Sauvegarder le tag pour une utilisation ultérieure
      #     # echo "$IMAGE_TAG" > back_image_tag.txt

    #  # 2. Copier les fichiers necessaires vers la VM distante
    #   - name: Copy files to VM
    #     uses: appleboy/scp-action@v0.1.7
    #     with:
    #       host: ${{ secrets.ORACLE_VM_IP }}
    #       username: ${{ secrets.ORACLE_VM_USER }}
    #       key: ${{ secrets.ORACLE_VM_SSH_KEY }}
    #       source: 
    #         docker-compose.yml
    #         Back/trading_back_v2/dockerfile-back
    #         # Back/trading_back_v2/back_image_tag.txt
    #       target: "~/trading_app"
    #       strip_components: 0
    #       rm: false
    #       debug: true

      # # Vérifier les fichiers transférés sur la VM
      # - name: Verify transferred files
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.ORACLE_VM_IP }}
      #     username: ${{ secrets.ORACLE_VM_USER }}
      #     key: ${{ secrets.ORACLE_VM_SSH_KEY }}
      #     script: |
      #       ls -la ~/trading_app
      #       echo "Contenu du dossier Back :"
      #       ls -la ~/trading_app/Back/trading_back_v2
      #       echo "Contenu du dossier API :"
      #       ls -la ~/trading_app/API_trading


      # # 3. Installer Docker Compose sur la VM distante
      # - name: Install Docker and Docker Compose
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.ORACLE_VM_IP }}
      #     username: ${{ secrets.ORACLE_VM_USER }}
      #     key: ${{ secrets.ORACLE_VM_SSH_KEY }}
      #     script: |
      #       sudo apt-get update
      #       sudo apt-get install -y docker.io
      #       sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #       sudo chmod +x /usr/local/bin/docker-compose
      #       docker --version
      #       docker-compose --version

      # # 4. Charger les variables d'environnement, gérer les conteneurs et déployer
      # - name: Manage containers and deploy services
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.ORACLE_VM_IP }}
      #     username: ${{ secrets.ORACLE_VM_USER }}
      #     key: ${{ secrets.ORACLE_VM_SSH_KEY }}
      #     script: |
      #       # Lire le tag de l'image
      #       export BACK_IMAGE_TAG=$(cat ~/trading_app/back_image_tag.txt)
            
      #       # Charger les variables d'environnement
      #       export $(grep -v '^#' ~/trading_app/.env | xargs)

      #       # Arrêter et supprimer les conteneurs et leurs images (sans supprimer le volume de la BD)
      #       cd ~/trading_app
      #       docker-compose down --rmi all --volumes --remove-orphans

      #       # Reconstruire et démarrer les services
      #       BACK_IMAGE=$BACK_IMAGE_TAG docker-compose up --build -d

      #       # Vérifier le statut des conteneurs
      #       docker ps -a