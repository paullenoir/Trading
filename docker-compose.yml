# docker-compose up -d
# docker-compose down    
# docker-compose down -v   supprime les donnees
services:
  # Premier service nommé 'db' pour la base de données
  # A Faire dans la VM: docker run --name db -e POSTGRES_DB=postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=Bonjour3030! -p 5432:5432 -v db_data:/var/lib/postgresql/data --restart always --shm-size=1g -d postgres:latest
  db:
    image: postgres:latest
    restart: always
    shm_size: '1gb'  # Augmenté pour de meilleures performances
    volumes:
      # Volume persistant pour les données
      - postgres_data:/var/lib/postgresql/data
      # Volume pour les sauvegardes
      - postgres_backups:/backups
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Bonjour3030!
    ports:
      # Port uniquement accessible depuis la VM
      # - "127.0.0.1:5432:5432"
      # local
      - "5432:5432"
    networks:
      - data_app_network
    # Vérifie régulièrement si la base de données est opérationnelle
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 60s
      timeout: 5s
      retries: 5

  # Deuxième service pour l'interface d'administration de la base de données
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - data_app_network
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: "168.138.69.233:5432/"
      ADMINER_DESIGN: nette # Theme plus moderne
    # Limites de ressources
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'

    # Accéder à Adminer
    # 1. Ouvrir http://<IP_PUBLIQUE_VM>:8080 dans votre navigateur
    # # Se connecter avec vos identifiants PostgreSQL
    # Système : PostgreSQL
    # Serveur : db
    # Utilisateur : postgres
    # Base de données : postgres

  # Service pour le backend Django
  # docker logs trading-back-1     
  back:
    # image: trading-back:latest
    image: ghcr.io/${GITHUB_REPOSITORY}/trading-back:latest
    restart: always
    # environment:
    #   POSTGRES_DB: ${POSTGRES_DB}
    #   POSTGRES_USER: ${POSTGRES_USER}
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #   POSTGRES_HOST: db  # Adresse de la base de données
    ports:
      - "8000:8000"
    networks:
      - data_app_network
    command: >
      sh -c "
        python manage.py makemigrations trading_back_app_v2 &&
        python manage.py migrate &&
        python manage.py populate_markets && 
        python manage.py run_back '1d'
      "
    depends_on:
      - db

  # Service pour le backend Django
  api:
    # image: trading-api:latest
    image: ghcr.io/${GITHUB_REPOSITORY}/trading-api:latest
    restart: always
    # environment:
    #   POSTGRES_DB: ${POSTGRES_DB}
    #   POSTGRES_USER: ${POSTGRES_USER}
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #   POSTGRES_HOST: db  # Adresse de la base de données
    ports:
      - "8001:8001"
    environment:
      - DEBUG=True
    networks:
      - data_app_network
    command: >
      sh -c "
        python manage.py runserver 0.0.0.0:8001
      "
    depends_on:
      - db
      - back

  front:
    # image: trading-front:latest
    image: ghcr.io/${GITHUB_REPOSITORY}/trading-front:latest
    restart: always
    ports:
      - "80:80"  # Exposition du port 80 pour servir l'application web
    networks:
      - data_app_network
    depends_on:
      - back  # S'assure que le backend est démarré avant le frontend
      - api   # S'assure que l'API est démarrée avant le frontend

networks:
  data_app_network:
    driver: bridge

# Définition des volumes persistants
volumes:
  postgres_data:
    driver: local    # Utilise le stockage local de la VM
  postgres_backups:
    driver: local